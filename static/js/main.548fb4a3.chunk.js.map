{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monstruo","id","name","email","CardList","monstruos","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","_super","call","e","setState","searchField","target","value","state","_this2","fetch","then","Response","json","users","_this$state","filteredMonsters","filter","monsturo","toLowerCase","includes","console","log","search_box_component_SearchBox","card_list_component_CardList","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","document","getElementById"],"mappings":"2SAGaA,qBAAO,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OACAE,IAAI,YACJC,IAAG,wBAAAC,OAA0BP,EAAMQ,SAASC,GAAzC,4BAEHR,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,SAASE,MACpBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,SAASG,UCLdC,EAAW,SAAAZ,GAGpB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACjBJ,EAAMa,UAAUC,IAAI,SAAAN,GAAQ,OACzBP,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKR,EAASC,GAAID,SAAUA,QCPjCS,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OACrBnB,EAAAC,EAAAC,cAAA,SACIC,UAAU,SACZiB,KAAK,SACLF,YAAaA,EAEbG,SAAUF,MCwEDG,oDA3Eb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAI,EAAAC,KAAAF,OAgCFP,aAAe,SAACU,GACdN,EAAKO,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SA/BrCV,EAAKW,MAAQ,CACXtB,UAAU,GACVmB,YAAa,IALJR,uDAyBb,WAAmB,IAAAY,EAAAT,KACjBU,MAAM,8CAELC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SAEzBF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAClB,UAAW4B,4BAO3C,WAEE,IAAAC,EAAiCf,KAAKQ,MAA/BtB,EAAP6B,EAAO7B,UAAWmB,EAAlBU,EAAkBV,YAKZW,EAAmB9B,EAAU+B,OAAO,SAACC,GAAD,OACxCA,EAASnC,KAAKoC,cAAcC,SAASf,EAAYc,iBAKnD,OAHEE,QAAQC,IAAIjB,GAIZ/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAWfH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAC+C,EAAD,CACE/B,YAAa,cAEbC,aAAcO,KAAKP,eAErBnB,EAAAC,EAAAC,cAACgD,EAAD,CAAUtC,UAAW8B,YArETS,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA1B,EAAA,GAAAQ,KAAAkB,EAAAC,KAAA,UAAqBnB,KAAK,SAAApB,GAAiD,IAA9CwC,EAA8CxC,EAA9CwC,OAAQC,EAAsCzC,EAAtCyC,OAAQC,EAA8B1C,EAA9B0C,OAAQC,EAAsB3C,EAAtB2C,OAAQC,EAAc5C,EAAd4C,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDdS,IAASC,OACP/D,EAAAC,EAAAC,cAACF,EAAAC,EAAM+D,WAAP,KACEhE,EAAAC,EAAAC,cAAC+D,EAAD,OAEFC,SAASC,eAAe,SAM1Bf","file":"static/js/main.548fb4a3.chunk.js","sourcesContent":["import React from \"react\"\r\nimport './card.style.css'\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img\r\n        alt=\"Monstruos\"\r\n        src={`https://robohash.org/${props.monstruo.id}?set=set4&size=180x180`}\r\n        />\r\n        <h2>{props.monstruo.name}</h2>\r\n        <p>{props.monstruo.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.style.css'\r\nimport { Card } from '../card/card.component';\r\n\r\n\r\nexport const CardList = props => {\r\n{/* Lo que hace children es tomar basicamente lo que le mande desde la app\r\n    return <div className='card-list'>{props.children}</div>*/}\r\n    return <div className='card-list'>\r\n        {props.monstruos.map(monstruo=>(\r\n            <Card key={monstruo.id} monstruo={monstruo}/>\r\n        ))}\r\n    </div>\r\n}","import React from \"react\";\r\nimport \"./search-box.style.css\"\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        className=\"search\"\r\n      type=\"search\" \r\n      placeholder={placeholder}\r\n      //e = evento onChange lo usamos para detectar que hubo un cambio en el DOM*\r\n      onChange={handleChange}\r\n      />\r\n)","import './App.css';\nimport React, { Component }  from 'react';\nimport { CardList } from './component/card-list/card-list.component';\nimport { SearchBox} from './component/search-box/search-box.component';\n\nclass App extends Component {\n  constructor(){\n    super();\n    //Se usa para setear estados\n    this.state = {\n      monstruos:[], //Array de objetos\n      searchField: \"\",\n\n        /*{\n          //Se le agrega un id por q en caso que alguno de los elementos del array cambie, React puede renderizar solo el q cambio.\n          name:'Frankestian',\n          id: 'obj1'\n        },\n        {\n          name:'Dracula',\n          id: 'obj2'\n        },\n        {\n          name:'Steve',\n          id: 'obj3'\n        }*/\n    };\n  }\n\n  //Basciamente componenteDidMount es llamado inmediatamente luego de que un componente es montado\n  \n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")//fetch me trae lo que haya en esa url\n    //THEN es una promesa, si el fetch se cumple entonces toma la respues \"Response\" y luego la convierte a formato entendible por js response.Json()\n    .then(Response=> Response.json())\n    //Lo que hace aca es tomar los usuarios del response y setear los nombres de mi vector monstruos\n    .then(users => this.setState({monstruos: users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  render () {\n    {/*Lo que estoy haciendo aca est tomando del objeto \"this.state\" la estructura y seteando como constante lo que tengo en monstruos y en Searchfield*/}\n    const {monstruos, searchField} = this.state;\n    {/*Estas dos lineas son equivalentes a la linea de arriba\n    const monstruos = this.state.monstruos\n    const searchField = this.state.searchField*/}\n    {/*Aca lo que estoy haciendo es de */}\n    const filteredMonsters = monstruos.filter((monsturo) => \n      monsturo.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n      console.log(searchField);\n      //console.log(filteredMonsters);\n\n    return(\n      <div className=\"App\">\n      {/*<header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n         basicamente aca lo que estoy haciendo es traerme el valor de Estado\n          {this.state.Estado}\n        </p>\n        <button onClick={()=>this.setState({Estado:'Si seÃ±orr'})}>Cambiar texto</button>\n        </div>\n      </header>\n      */}\n      <h1>Buscador de Gatos</h1>\n      <SearchBox\n        placeholder= \"Buscar gato\"\n        //e = evento onChange lo usamos para detectar que hubo un cambio en el DOM*\n        handleChange={this.handleChange}\n      />\n      <CardList monstruos={filteredMonsters}>\n      </CardList>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}